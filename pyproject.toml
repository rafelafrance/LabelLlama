[build-system]
requires = ["uv_build>=0.8.12"]
build-backend = "uv_build"

[project]
name = "LabelLlama"
version = "0.1.0"
readme = "README.md"
description = ""
license = { file = "LICENSE" }
authors = [{ name = "Raphael LaFrance", email = "raphael.lafrance@gmail.com" }]
requires-python = ">=3.13"
dependencies = [
    "accelerate>=1.10.0",
    "datasets>=4.0.0",
    "dspy>=3.0.1",
    "evaluate>=0.4.5",
    "ftfy>=6.3.1",
    "imagesize>=1.4.1",
    "ipywidgets>=8.1.7",
    "jinja2>=3.1.6",
    "jupyterlab>=4.4.6",
    "levenshtein>=0.27.1",
    "pandas>=2.3.1",
    "pillow>=11.3.0",
    "pip>=25.2",
    "regex>=2025.7.34",
    "rich>=14.1.0",
    "torch>=2.8.0",
    "torchvision>=0.23.0",
    "tqdm>=4.67.1",
    "transformers>=4.55.2",
]

[tool.uv.build-backend]
module-root = "."
module-name = "llama"

[tool.ruff]

target-version = "py313"

show-fixes = true

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]

select = ["ALL"]

ignore = [
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
    "COM812",  # Trailing comma missing
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "D105",    # Missing docstring in public method
    "D107",    # Missing docstring in public __init__
    "D203",    # 1 blank line required before class docstring
    "D212",    # Multi-line docstring summary should start at the first line
    "DTZ005",  # Pass a `datetime.timezone` object to the `tz` parameter
    "DTZ011",  # datetime.date.today() used"ERA001",  # Remove commented-out code
    "ERA001",  # Remove commented-out code
    "G004",    # Logging statement uses f-string
    "LOG015",  # Use own logger instead
    "PD901",   # Avoid using the generic variable name df for DataFrames
    "PLR0913", # Too many arguments in function definition ({c_args} > {max_args})
    "PLW2901", # Outer {outer_kind} variable {name} overwritten by inner {inner_kind} target
    "PT009",   # Use a regular assert instead of unittest-style {assertion}
    "RET504",  # Unnecessary assignment to {name} before return statement
    "SIM114",  # Combine if branches using logical or operator
    "SIM905",  # Consider using a list literal instead of `str.split`
    "SLF001",  # Private member accessed: {access}
    "T201",    # print found
]
